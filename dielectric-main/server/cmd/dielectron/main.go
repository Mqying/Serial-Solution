package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/silverswords/dielectric/server/cmd"
	"github.com/silverswords/dielectric/server/serial"
)

const (
	VersionI = 1
	VersionIII = 3
	VersionVI = 6
)

func main() {
	var flag int
	var version int
	var err error

	if len(os.Args) == 2 {
		flag, err = strconv.Atoi(os.Args[1])
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(flag)
	}

	if len(os.Args) == 3 {
		flag, err = strconv.Atoi(os.Args[1])
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(flag)

		version, err = strconv.Atoi(os.Args[2])
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(flag, " ", version)
	}

	if flag == cmd.SerialCmdEmpty {
		if version == VersionI {
			data := []byte{ // Single
				0x5B, 0x31, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x32, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x33, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x34, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20,
				0x5B, 0x35, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20,
				0x5B, 0x36, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x37, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x38, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x39, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 
				0x5B, 0x31, 0x30, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x20, 

				0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x4B, 0x76, 0x20, // Avg
				0xB1, 0xE0, 0xBA, 0xC5, 0x30, 0x31, 0x20, 0x20, 0x20, // 编号：01
				0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A, // 测试时间:
				0x32, 0x30, 0x32, 0x32, 0xC4, 0xEA, // year
				0x30, 0x38, 0xD4, 0xC2, // month
				0x32, 0x34, 0xC8, 0xD5, // day
				0x31, 0x31, 0xCA, 0xB1, // hour
				0x31, 0x30, 0xB7, 0xD6, 0x20, // minute
			}

			l := len(data)
			if data[l - 1] != 0x20 || data[l - 2] != 0xD6 {
				fmt.Println("Data format error, len = ", l, ", data[-1] = ", data[l - 1], ", data[-2] = ", data[l - 2])
				return
			}

			fmt.Println(len(data))

			if s, err := serial.GetDielectronRecordStruct(data); err != nil {
				fmt.Println("Error:", err)
			} else {
				fmt.Printf("%v\n", s)
			}

			return
		}

		if version == VersionIII {
			data := []byte{ // Three
				0x5B, 0x31, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x32, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35,
				0x5B, 0x33, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x34, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x35, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x36, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x37, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x38, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x39, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				0x5B, 0x31, 0x30, 0x5D, 0x35, 0x33, 0x2E, 0x20, 0x35, 
				
				0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x35, 0x33, 0x2E, 0x20, 0x35, 0x4B, 0x76, // Avg
				0xB1, 0xAD, 0xCE, 0xBB, 0x31, 0x20, // 编号： 1
				0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A, // 测试时间:
				0x32, 0x30, 0x32, 0x32, 0xC4, 0xEA, // year
				0x30, 0x38, 0xD4, 0xC2, // month
				0x32, 0x34, 0xC8, 0xD5, // day
				0x31, 0x31, 0xCA, 0xB1, // hour
				0x33, 0x30, 0xB7, 0xD6, // min
			}

			l := len(data)
			if data[l - 1] != 0xD6 || data[l - 2] != 0xB7 {
				fmt.Println("Data format error, len = ", l, ", data[-1] = ", data[l - 1], ", data[-2] = ", data[l - 2])
				return
			}

			fmt.Println(len(data))

			if s, err := serial.GetDielectronRecordStruct(data); err != nil {
				fmt.Println("Error:", err)
			} else {
				fmt.Printf("%v\n", s)
			}

			return
		}
	}

	deviceType := 0

	v := &serial.VoltageSensor{}

	var data []byte

	if err = v.OpenSerial(deviceType); err != nil {
		fmt.Println("Open Serial Error:", err)
		return
	}

	if flag == cmd.SerialCmdFrontPage {
		if data, err = v.SendFrontPage(deviceType); err != nil {
			fmt.Println(flag, " Error ", err)
			return
		}
	}

	if flag == cmd.SerialCmdPreviousPage {
		if data, err = v.SendPreviousPage(deviceType); err != nil {
			fmt.Println(flag, " Error ", err)
			return
		}
	}

	if flag == cmd.SerialCmdNextPage {
		if data, err = v.SendNextPage(deviceType); err != nil {
			fmt.Println(flag, " Error ", err)
			return
		}
	}

	if flag == cmd.SerialCmdPrint {
		v.SendPrint()
		return
	}

	if s, err := serial.GetDielectronRecordStruct(data); err != nil {
		fmt.Println("Error:", err)
	} else {
		fmt.Printf("%v\n", s)
	}
}