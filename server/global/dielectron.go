package global

import (
	"errors"
)

// Set virtual codes to show on UI, help test, while data is not so much
// just use this way to replace mock

var (
	dielectron [][]byte = [][]byte{
		{
			0x5B, 0x31, 0x5D, 0x33, 0x33, 0x2E, 0x20, 0x31,
			0x5B, 0x32, 0x5D, 0x31, 0x37, 0x2E, 0x20, 0x38,
			0x5B, 0x33, 0x5D, 0x32, 0x33, 0x2E, 0x20, 0x32,
			0x5B, 0x34, 0x5D, 0x31, 0x38, 0x2E, 0x20, 0x31,
			0x5B, 0x35, 0x5D, 0x31, 0x36, 0x2E, 0x20, 0x39,
			0x5B, 0x36, 0x5D, 0x30, 0x39, 0x2E, 0x20, 0x32,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x31, 0x39, 0x2E, 0x20, 0x37, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x31, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x31, 0x37,
			0xB7, 0xD6,
		}, // 1号杯 第一组
		{
			0x5B, 0x31, 0x5D, 0x31, 0x33, 0x2E, 0x20, 0x32,
			0x5B, 0x32, 0x5D, 0x31, 0x38, 0x2E, 0x20, 0x32,
			0x5B, 0x33, 0x5D, 0x31, 0x35, 0x2E, 0x20, 0x39,
			0x5B, 0x34, 0x5D, 0x31, 0x37, 0x2E, 0x20, 0x33,
			0x5B, 0x35, 0x5D, 0x31, 0x37, 0x2E, 0x20, 0x32,
			0x5B, 0x36, 0x5D, 0x30, 0x37, 0x2E, 0x20, 0x37,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x31, 0x34, 0x2E, 0x20, 0x39, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x32, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x30, 0x33,
			0xB7, 0xD6,
		}, // 2号杯 第一组
		{
			0x5B, 0x31, 0x5D, 0x33, 0x32, 0x2E, 0x20, 0x32,
			0x5B, 0x32, 0x5D, 0x31, 0x32, 0x2E, 0x20, 0x32,
			0x5B, 0x33, 0x5D, 0x31, 0x36, 0x2E, 0x20, 0x39,
			0x5B, 0x34, 0x5D, 0x31, 0x33, 0x2E, 0x20, 0x35,
			0x5B, 0x35, 0x5D, 0x31, 0x34, 0x2E, 0x20, 0x34,
			0x5B, 0x36, 0x5D, 0x31, 0x32, 0x2E, 0x20, 0x35,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x31, 0x36, 0x2E, 0x20, 0x39, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x33, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x30, 0x33,
			0xB7, 0xD6,
		}, // 3号杯 第一组
		{
			0x5B, 0x31, 0x5D, 0x31, 0x33, 0x2E, 0x20, 0x31,
			0x5B, 0x32, 0x5D, 0x31, 0x31, 0x2E, 0x20, 0x38,
			0x5B, 0x33, 0x5D, 0x31, 0x31, 0x2E, 0x20, 0x33,
			0x5B, 0x34, 0x5D, 0x30, 0x39, 0x2E, 0x20, 0x32,
			0x5B, 0x35, 0x5D, 0x30, 0x38, 0x2E, 0x20, 0x37,
			0x5B, 0x36, 0x5D, 0x31, 0x31, 0x2E, 0x20, 0x31,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x31, 0x30, 0x2E, 0x20, 0x38, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x31, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x30, 0x38,
			0xB7, 0xD6,
		}, // 1号杯 第二组
		{
			0x5B, 0x31, 0x5D, 0x30, 0x39, 0x2E, 0x20, 0x35,
			0x5B, 0x32, 0x5D, 0x37, 0x39, 0x2E, 0x20, 0x34,
			0x5B, 0x33, 0x5D, 0x31, 0x32, 0x2E, 0x20, 0x30,
			0x5B, 0x34, 0x5D, 0x31, 0x32, 0x2E, 0x20, 0x39,
			0x5B, 0x35, 0x5D, 0x31, 0x34, 0x2E, 0x20, 0x39,
			0x5B, 0x36, 0x5D, 0x30, 0x39, 0x2E, 0x20, 0x38,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x32, 0x33, 0x2E, 0x20, 0x30, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x32, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x30, 0x33,
			0xB7, 0xD6,
		}, // 2号杯，第二组
		{
			0x5B, 0x31, 0x5D, 0x34, 0x37, 0x2E, 0x20, 0x36,
			0x5B, 0x32, 0x5D, 0x31, 0x35, 0x2E, 0x20, 0x34,
			0x5B, 0x33, 0x5D, 0x31, 0x34, 0x2E, 0x20, 0x33,
			0x5B, 0x34, 0x5D, 0x31, 0x33, 0x2E, 0x20, 0x30,
			0x5B, 0x35, 0x5D, 0x31, 0x31, 0x2E, 0x20, 0x36,
			0x5B, 0x36, 0x5D, 0x34, 0x30, 0x2E, 0x20, 0x35,
			0x5B, 0x37, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x38, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x39, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0x5B, 0x31, 0x30, 0x5D, 0x30, 0x30, 0x2E, 0x20, 0x30,
			0xC6, 0xBD, 0xBE, 0xF9, 0x3A, 0x32, 0x33, 0x2E, 0x20, 0x37, 0x4B, 0x76,
			0xB1, 0xAD, 0xCE, 0xBB, 0x33, 0x20,
			0xB2, 0xE2, 0xCA, 0xD4, 0xCA, 0xB1, 0xBC, 0xE4, 0x3A,
			0x32, 0x30, 0x32, 0x32,
			0xC4, 0xEA, 0x30, 0x38,
			0xD4, 0xC2, 0x32, 0x34,
			0xC8, 0xD5, 0x31, 0x34,
			0xCA, 0xB1, 0x30, 0x33,
			0xB7, 0xD6,
		}, // 3号杯，第二组
	}

	idx int = 0

	errInvalidDelta = errors.New("invalid delta")
	errIdxEmpty     = errors.New("no previous page")
	errIdxFull      = errors.New("no next page")
)

func DielectronMockData(delta int) ([]byte, error) {
	if delta > 0 {
		if idx == len(dielectron) {
			return nil, errIdxFull
		}

		data := dielectron[idx]
		idx += delta

		return data, nil
	}

	if delta < 0 {
		if idx == 0 {
			return nil, errIdxEmpty
		}

		idx += delta
		data := dielectron[idx]

		return data, nil
	}

	return nil, errInvalidDelta
}
